Experiment: Will repeatedly reading from the bash FD before computation is complete yield the same '$' string?

Result - seemingly no. When we repeatedly read from the bash FD after writing to it, the initial results are
printed but no new stuff is printed, not even a '$' sign



 
1 chars were  read from termianl
Read 2 characters
Char 1: $
Char 2:  
Read 1 characters
Char 1: 

Read 2 characters
Char 1: $
Char 2:  



 
# Newline character entered into terminal is read - frees up the term_nread
# blocking read
1 chars were  read from termianl


# The bash shell has already written '$ ' upon being executed; this is read
# by the daemon program
Read 2 characters
Char 1: $
Char 2:  

# A single newline character is written
# by the bash shell and read - this is the newline character
# inputted to the actual terminal
Read 1 characters
Char 1: 

# Upon reading the newline character, the bash shell outputs
# '$ '
Read 2 characters
Char 1: $
Char 2:  

# The following line blocks, waiting for bash to output more chars:
	nread = read(read_fd, buf, 254)


what's happening?

basically, you could just keep reading with some sort of set timeout



so you enter something into the terminal
i want this to go to the shell, which occurs through the write() call

i then want to get back the output when the shell is done processing,
and display it on the screen

the issue is that after my write() call, there is some processing delay
between the immediate production of an output string of '$ ' and the
actual bash output, and all that's read is the '$ ' string


need two separate threads
one continuously reads from the bash output

the other continuously reads from the terminal output and writes
the result to bash










